# -*- coding: utf-8 -*-
"""titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E4jvfyWGGGiY9I78rbKcKt26GOIrg4Sm
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import RandomForestRegressor
from sklearn.feature_selection import chi2
import matplotlib.pyplot as plt
import seaborn as sns
#
# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os

df_train = pd.read_csv('/kaggle/input/titanic/train.csv')
df_test = pd.read_csv('/kaggle/input/titanic/test.csv')
data = pd.concat([df_train, df_test], axis = 0)
data.reset_index(inplace = True, drop = True)

PassengerId = df_test['PassengerId']

"""# **Data Visualization**"""

sns.countplot(data = data, x = 'Pclass', hue = 'Survived')

sns.countplot(data = data, x = 'Sex', hue = 'Survived')

sns.countplot(data = data, x = 'Parch', hue = 'Survived')

sns.countplot(data = data, x = 'SibSp', hue = 'Survived')

sns.countplot(data = data, x = 'Embarked', hue = 'Survived')

g = sns.FacetGrid(data, col='Survived')
g.map(sns.histplot, 'Age', kde = False)

g = sns.FacetGrid(data, col='Survived')
g.map(sns.histplot, 'Fare', kde = False)

"""# **Feature Engineering**"""

data['Fare'].fillna(data.Fare.mean(), inplace = True)

data['family_size'] = data['Parch'] + data['SibSp']

data['prefix'] = data['Name'].str.replace('.', ',').str.split(', ', expand = True)[1]
data['prefix'] = data['prefix'].replace(['Rev', 'Dr', 'Col', 'Mlle', 'Major', 'Ms', 'Lady', 'Sir', 'Mme', 'Don', 'Capt', 'the Countess', 'Jonkheer', 'Dona'],
                                          ['Mr', 'Mr', 'Mr', 'Miss', 'Mr', 'Miss', 'Miss', 'Mr', 'Mrs', 'Mr', 'Mr', 'Mrs', 'Mr', 'Mrs'])

data['Sex'] = np.where(data['Sex'] == 'male', 1, 0)

data['Ticket'] = data['Ticket'].apply(lambda x: x.replace('.', '').replace('/', '').split(' ')[0] if not (x.split(' ')[0][0]).isdigit() else 'X')
data['Ticket'] = data['Ticket'].astype('category').cat.codes

data['Cabin'] = data['Cabin'].apply(lambda x: x[0] if not pd.isnull(x) else 'NoCabin')
data['Cabin'] = data['Cabin'].astype('category').cat.codes

data['Embarked'].fillna('S', inplace = True)
emb = pd.get_dummies(data['Embarked'], drop_first = True)
data = pd.concat([data, emb], axis = 1)
data['Q'] = np.where(data['Q'], 1, 0)
data['S'] = np.where(data['S'], 1, 0)

data['prefix'] = data['prefix'].astype('category').cat.codes


data.drop(['Name', 'SibSp', 'Parch', 'Embarked'], axis = 1, inplace = True)


data.head()

data.describe()

dataAgeNull = data[data["Age"].isnull()]
dataAgeNotNull = data[data["Age"].notnull()]
remove_outlier = dataAgeNotNull[(np.abs(dataAgeNotNull["Fare"]-dataAgeNotNull["Fare"].mean())>(4*dataAgeNotNull["Fare"].std()))|
                      (np.abs(dataAgeNotNull["family_size"]-dataAgeNotNull["family_size"].mean())>(4*dataAgeNotNull["family_size"].std()))
                     ]

rfModel_age = RandomForestRegressor(n_estimators=2000,random_state=42)
ageColumns = ['Fare', 'Pclass', 'Sex', 'family_size', 'Cabin','Ticket', 'prefix', 'Q', 'S']
rfModel_age.fit(remove_outlier[ageColumns], remove_outlier["Age"])

ageNullValues = rfModel_age.predict(X= dataAgeNull[ageColumns])
dataAgeNull.loc[:,"Age"] = ageNullValues
data = pd.concat([dataAgeNotNull, dataAgeNull], axis = 0)
data.reset_index(inplace=True, drop=True)

df_train = data[data['Survived'].notnull()].sort_values(by = "PassengerId")
df_test = data[data['Survived'].isnull()].sort_values(by = 'PassengerId')
df_test.drop(['Survived'], axis = 1, inplace = True)

x, y = df_train.drop(['Survived'], axis = 1), df_train['Survived']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 1)

model = RandomForestClassifier(n_estimators = 100, max_depth = 10, random_state = 1)
model.fit(x_train, y_train)

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
y_pred = model.predict(x_test)
accuracy_score(y_test, y_pred)

output = model.predict(df_test)
output = output.astype(int)
output = pd.DataFrame({'PassengerId':PassengerId, 'Survived': output})

output.to_csv('submission.csv', index = False)

output

